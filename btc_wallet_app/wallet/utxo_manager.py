# btc_wallet_app/wallet/utxo_manager.py
from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException # Updated import
from decimal import Decimal

# Assuming config.py is in the parent directory or PYTHONPATH is set up
# For direct execution or testing, you might need to adjust path or use absolute imports if structured as a package
try:
    from .. import config # For package-like execution
except ImportError:
    import sys
    import os
    # Add the parent directory (btc_wallet_app) to sys.path
    # This allows importing config when running utxo_manager.py directly for testing
    current_dir = os.path.dirname(os.path.abspath(__file__))
    parent_dir = os.path.dirname(current_dir)
    if parent_dir not in sys.path:
        sys.path.insert(0, parent_dir)
    import config


def get_rpc_connection():
    """Establishes and returns a connection to the Bitcoin Core RPC."""
    rpc_url = f"http://{config.RPC_USER}:{config.RPC_PASSWORD}@{config.RPC_HOST}:{config.RPC_PORT}"
    try:
        rpc_conn = AuthServiceProxy(rpc_url, timeout=120)
        # Test connection
        rpc_conn.getblockchaininfo()
        return rpc_conn
    except JSONRPCException as e:
        print(f"JSONRPCException: {e.error}")
        raise ConnectionError(f"Failed to connect to Bitcoin Core RPC: {e.error}")
    except Exception as e: # Catch other potential errors like requests.exceptions.ConnectionError
        print(f"General Exception: {e}")
        raise ConnectionError(f"Failed to connect to Bitcoin Core RPC. Ensure Bitcoin Core is running and RPC settings are correct. Error: {e}")

def fetch_utxos(addresses: list, min_confirmations_override: int = None):
    """
    Fetches UTXOs for a list of addresses using the listunspent RPC call.
    Returns a list of UTXO dictionaries.
    Amount is converted to BTC (Decimal).
    """
    if not addresses:
        return []

    rpc_conn = get_rpc_connection()

    min_conf = min_confirmations_override if min_confirmations_override is not None else config.MIN_CONFIRMATIONS
    max_conf = 9999999 # Standard way to specify 'no maximum'

    try:
        # listunspent takes minconf, maxconf, addresses array, include_unsafe, query_options
        # We are interested in UTXOs for specific addresses.
        # The addresses parameter should be a list of strings.
        # query_options can specify 'minimumAmount' if needed, but we filter later.
        raw_utxos = rpc_conn.listunspent(min_conf, max_conf, addresses)

        utxos = []
        for utxo in raw_utxos:
            utxos.append({
                'txid': utxo['txid'],
                'vout': utxo['vout'],
                'address': utxo['address'],
                'scriptPubKey': utxo['scriptPubKey'],
                'amount': Decimal(str(utxo['amount'])), # Ensure amount is Decimal for precision
                'confirmations': utxo['confirmations'],
                'spendable': utxo.get('spendable', False), # .get for compatibility
                'solvable': utxo.get('solvable', False)    # .get for compatibility
            })
        return utxos
    except JSONRPCException as e:
        print(f"Error fetching UTXOs: {e.error}")
        # It's possible an address is not in the wallet or has no UTXOs,
        # listunspent might return an empty list or an error depending on the node version/config.
        # If the error indicates an issue with an address not being in the wallet,
        # it might be better to return an empty list for that address or log a warning.
        # For now, re-raise or return empty based on common behavior.
        # Bitcoin Core typically returns an empty list if addresses are valid but have no UTXOs.
        # If an address isn't part of the wallet and `listunspent` is called without importing the address first,
        # it might not show UTXOs or could error if the node isn't set to watch it.
        # This function assumes addresses are being watched by the node or are part of its wallet.
        return [] # Return empty list on error or no UTXOs
    except Exception as e:
        print(f"An unexpected error occurred while fetching UTXOs: {e}")
        return []

if __name__ == '__main__':
    # This is a placeholder for testing.
    # To run this test, you need:
    # 1. A Bitcoin Core node (regtest or testnet recommended) running.
    # 2. RPC credentials in config.py matching your node's bitcoin.conf.
    # 3. Addresses that you control and have UTXOs on that network.

    print("Attempting to fetch UTXOs (ensure your Bitcoin node is running and config.py is set up)...")

    # Replace with your actual test addresses that have funds on testnet/regtest
    # Ensure these addresses are imported into your Bitcoin Core wallet if not generated by it.
    # For regtest, you can generate blocks to an address: bitcoin-cli -regtest generatetoaddress 101 <your_address>

    # Example for a testnet address (replace with a real one you use for testing)
    if config.NETWORK == "testnet":
        # Add a known testnet address with UTXOs here for testing
        test_addresses = ["tb1qxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] # Replace with your testnet address
        print(f"Using testnet. Please ensure the address {test_addresses} has UTXOs on testnet.")
    elif config.NETWORK == "mainnet":
        # Be very careful with mainnet. It's better to not run tests directly on mainnet without caution.
        test_addresses = ["1BitcoinEaterAddressDontSendf59kuE"] # Dummy address to trigger RPC attempt
        print("Using mainnet. Be cautious with tests on mainnet. Using a dummy address for RPC connection test.")
    else: # Assuming regtest
        # For regtest, you might need to generate a new address and send some coins to it.
        # from wallet.key_manager import generate_wif_key # Assuming key_manager.py is in wallet/
        # test_key = generate_wif_key(network_name='bitcoin_regtest', address_type='p2wpkh')
        # test_addresses = [test_key['address']]
        # print(f"Generated regtest address for testing: {test_addresses[0]}")
        # print(f"Send some test BTC to this address via 'generatetoaddress' or 'sendtoaddress' in bitcoin-cli")
        # print(f"Example: bitcoin-cli -regtest generatetoaddress 101 {test_addresses[0]}")
        test_addresses = ["bcrt1qxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"] # Replace with your regtest address
        print(f"Using regtest. Please ensure the address {test_addresses} has UTXOs on regtest.")


    if not test_addresses or "xxxxxxxxxx" in test_addresses[0] :
        print("Please update 'test_addresses' in the __main__ block of utxo_manager.py with actual addresses for testing.")
    else:
        try:
            print(f"Fetching UTXOs for addresses: {test_addresses} with min_confirmations: {config.MIN_CONFIRMATIONS}")
            utxos = fetch_utxos(test_addresses)
            if utxos:
                print("Found UTXOs:")
                for utxo in utxos:
                    print(f"  TXID: {utxo['txid']}, Vout: {utxo['vout']}, Amount: {utxo['amount']} BTC, Confirmations: {utxo['confirmations']}")
            else:
                print("No UTXOs found or error occurred.")
                print("Ensure your Bitcoin Core node is running, synced, and the wallet has the addresses with spendable UTXOs.")
                print(f"RPC Settings: URL: http://{config.RPC_HOST}:{config.RPC_PORT}, User: {config.RPC_USER}")

        except ConnectionError as e:
            print(f"ConnectionError: {e}")
            print("Please ensure Bitcoin Core is running and RPC settings in config.py are correct.")
        except Exception as e:
            print(f"An unexpected error occurred during testing: {e}")
